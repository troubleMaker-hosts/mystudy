<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="OFF">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台 :  此处 level = debug 才能 打印sql-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%highlight{%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n}{FATAL=Bright Red, ERROR=Bright Magenta, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White}"/>
        </Console>
<!--        处理info级别的日志，并把该日志放到logs/info.log文件中-->
<!--        打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingInfoFile" fileName="log/info.log"
                     filePattern="logs/info/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz">
<!--            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <Filters>
                <!--只接受INFO级别的日志，其余的全部拒绝处理-->
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
<!--            日志格式-->
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
<!--            文件大小-->
            <SizeBasedTriggeringPolicy size="5MB"/>
        </RollingFile>
        <RollingFile name="RollingErrorFile" fileName="log/error.log"
                     filePattern="logs/error/$${date:yyyy-MM}/error-%d{MM-dd-yyyy}-%i.log.gz">
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
            <SizeBasedTriggeringPolicy size="5MB"/>
        </RollingFile>

<!--        druid的日志记录追加器-->
        <RollingFile name="druidSqlRollingFile" fileName="log/druid-sql.log"
                     filePattern="logs/$${date:yyyy-MM}/api-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="5 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
    </Appenders>

<!--    然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
<!--        默认的root的logger-->
        <Root level="debug">
            <appender-ref ref="RollingInfoFile"/>
            <appender-ref ref="RollingErrorFile"/>
            <appender-ref ref="Console"/>
        </Root>
        <!--打印sql-->
        <!--额外配置的logger-->
        <!--打印druid连接池的sql语句打印-->
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>

        <!--记录druid-sql的记录-->
        <logger name="druid.sql.Statement" level="debug" additivity="true">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>

        <!--log4j2 自带过滤日志-->
        <Logger name="org.hibernate" level="error" />
        <logger name="org.springframework" level="WARN"/>
        <logger name="io.netty" level="info"/>
        <logger name="reactor.util" level="info"/>
        <logger name="org.mybatis" level="info"/>
        
    </Loggers>
</Configuration>